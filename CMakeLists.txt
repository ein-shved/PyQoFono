cmake_minimum_required(VERSION 3.16)
cmake_policy(VERSION 3.16)

# Enable policy to not use RPATH settings for install_name on macOS.
if(POLICY CMP0068)
  cmake_policy(SET CMP0068 NEW)
endif()

# Consider changing the project name to something relevant for you.
project(Qofono)

# ================================ General configuration ======================================

# Set CPP standard to C++11 minimum.
set(CMAKE_CXX_STANDARD 17)


# The name of the generated bindings module (as imported in Python). You can change the name
# to something relevant for your project.
set(bindings_library "QOfono")

# The header file with all the types and functions for which bindings will be generated.
# Usually it simply includes other headers of the library you are creating bindings for.
set(wrapped_header ${CMAKE_SOURCE_DIR}/src/bindings.h)

# The typesystem xml file which defines the relationships between the C++ types / functions
# and the corresponding Python equivalents.
set(typesystem_file ${CMAKE_SOURCE_DIR}/src/bindings.xml)

# Specify which C++ files will be generated by shiboken. This includes the module wrapper
# and a '.cpp' file per C++ type. These are needed for generating the module shared
# library.
set(generated_sources_names
            qofonoassistedsatellitenavigation_wrapper.cpp
            qofonocallforwarding_wrapper.cpp
            qofonocallmeter_wrapper.cpp
            qofonocallsettings_wrapper.cpp
            qofonocallvolume_wrapper.cpp
            qofonocellbroadcast_wrapper.cpp
            qofonoconnectioncontext_wrapper.cpp
            qofonoconnectionmanager_wrapper.cpp
            qofonohandsfreeaudioagent_wrapper.cpp
            qofonohandsfreeaudiocard_wrapper.cpp
            qofonohandsfreeaudiomanager_wrapper.cpp
            qofonohandsfree_wrapper.cpp
            qofonolocationreporting_wrapper.cpp
            qofonomanager_wrapper.cpp
            qofonomessagemanager_wrapper.cpp
            qofonomessagewaiting_wrapper.cpp
            qofonomessage_wrapper.cpp
            qofonomodem_wrapper.cpp
            qofono_module_wrapper.cpp
            qofononetworkoperator_wrapper.cpp
            qofononetworkregistration_wrapper.cpp
            qofonophonebook_wrapper.cpp
            qofonopositioningrequestagent_wrapper.cpp
            qofonoradiosettings_wrapper.cpp
            qofonosimmanager_wrapper.cpp
            qofonocallbarring_wrapper.cpp
            qofonosimwatcher_wrapper.cpp
            qofonosmartmessagingagent_wrapper.cpp
            qofonosmartmessaging_wrapper.cpp
            qofonosupplementaryservices_wrapper.cpp
            qofonotexttelephony_wrapper.cpp
            qofonovoicecallmanager_wrapper.cpp
            qofonovoicecall_wrapper.cpp
            __pysideproperty_stub_wrapper.cpp)

set(generated_sources)
foreach (src ${generated_sources_names})
    list(APPEND generated_sources ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/${src})
endforeach()


# ================ External libraries and Shiboken detection ===================

find_package(Shiboken2 REQUIRED)
find_package(PySide2 REQUIRED)
find_package(Qt5DBus REQUIRED)

set(shiboken_shared_libraries Shiboken2::libshiboken)
set(pyside_shared_libraries PySide2::pyside2)

find_program(GENERATOR shiboken2 REQUIRED)
if (NOT GENERATOR)
    message(FATAL_ERROR "You need to specify GENERATOR variable (-DGENERATOR=value)")
endif()
set(shiboken_path ${GENERATOR})

find_package(PkgConfig REQUIRED)
pkg_check_modules(QOFONO qofono-qt5)
pkg_check_modules(PYTHON3 python3)
pkg_check_modules(PYSIDE pyside2)

set(PREFIXED_INCLUDES "${QOFONO_CFLAGS};${PYTHON3_CFLAGS}")

foreach(qt5dbuslib ${Qt5DBus_INCLUDE_DIRS})
    list(APPEND PREFIXED_INCLUDES -I${qt5dbuslib})
endforeach()

foreach(inc ${PYSIDE_INCLUDE_DIRS})
    LIST(APPEND PREFIXED_INCLUDES -I${inc})
    file(GLOB children RELATIVE ${inc} ${inc}/*)
    foreach(child ${children})
        if(IS_DIRECTORY ${inc}/${child})
            LIST(APPEND PREFIXED_INCLUDES -I${inc}/${child})
        endif()
    endforeach()
endforeach()

set(PYTHONPATH "${PYSIDE_PYTHONPATH}/../")

list(APPEND PREFIXED_INCLUDES -I${CMAKE_SOURCE_DIR}/src)

# ==================================== RPATH configuration ====================================


# =============================================================================================
# !!! (The section below is deployment related, so in a real world application you will want to
# take care of this properly with some custom script or tool).
# =============================================================================================
# Enable rpaths so that the built shared libraries find their dependencies.
set(CMAKE_SKIP_BUILD_RPATH FALSE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
set(CMAKE_INSTALL_RPATH ${shiboken_module_path} ${CMAKE_CURRENT_SOURCE_DIR})
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
# =============================================================================================
# !!! End of dubious section.
# =============================================================================================


# ====================== Shiboken target for generating binding C++ files  ====================

# Set up the options to pass to shiboken.
set(shiboken_options --generator-set=shiboken --enable-parent-ctor-heuristic
    --enable-return-value-heuristic --use-isnull-as-nb_nonzero
    --avoid-protected-hack
    ${PREFIXED_INCLUDES}
    -T${CMAKE_SOURCE_DIR}
    -T${PYSIDE_TYPESYSTEMS}
    --output-directory=${CMAKE_CURRENT_BINARY_DIR}
    )


set(generated_sources_dependencies ${wrapped_header} ${typesystem_file})

# Add custom target to run shiboken to generate the binding cpp files.
add_custom_command(OUTPUT ${generated_sources}
                    COMMAND ${shiboken_path}
                    ${shiboken_options} ${wrapped_header} ${typesystem_file}
                    DEPENDS ${generated_sources_dependencies}
                    IMPLICIT_DEPENDS CXX ${wrapped_header}
                    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
                    COMMENT "Running generator for ${typesystem_file}.")


# =============================== CMake target - bindings_library =============================


# Set the cpp files which will be used for the bindings library.
set(${bindings_library}_sources ${generated_sources})

# Define and build the bindings library.
add_library(${bindings_library} MODULE ${${bindings_library}_sources})

# Apply relevant include and link flags.
target_include_directories(${bindings_library} PRIVATE ${python_include_dir})
target_include_directories(${bindings_library} PRIVATE ${shiboken_include_dir})
target_include_directories(${bindings_library} PRIVATE ${CMAKE_SOURCE_DIR})

foreach(inc ${PREFIXED_INCLUDES})
    string(REPLACE "-I" "" inc "${inc}")
    target_include_directories(${bindings_library} PRIVATE ${inc})
endforeach()

target_link_libraries(${bindings_library} PRIVATE ${shiboken_shared_libraries})
target_link_libraries(${bindings_library} PRIVATE ${pyside_shared_libraries})
target_link_libraries(${bindings_library} PUBLIC ${QOFONO_LINK_LIBRARIES})

# Adjust the name of generated module.
set_property(TARGET ${bindings_library} PROPERTY PREFIX "")
set_property(TARGET ${bindings_library} PROPERTY OUTPUT_NAME
             "${bindings_library}${PYTHON_EXTENSION_SUFFIX}")

install(TARGETS ${bindings_library}
    LIBRARY DESTINATION ${PYTHONPATH}
    RUNTIME DESTINATION ${PYTHONPATH})
